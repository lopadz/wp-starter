// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// Breakpoints
@mixin breakpoint( $size ) {
	@if $size == 'small' {
		@media screen and (max-width: $breakpoint-small) {
			@content;
		}
	}
	@else if $size == 'medium' {
		@media screen and (min-width: $breakpoint-medium) {
			@content;
		}
	}
	@else if str-replace( #{$size}, ' ', '-' ) == 'medium-only' {
		@media screen and (min-width: $breakpoint-medium) and (max-width: $breakpoint-large - 1 )  {
			@content;
		}
	}
	@else if $size == 'large' {
		@media screen and (min-width: $breakpoint-large ) {
			@content;
		}
	}
	@else {
		@warn 'Breakpoint Mixin: Please enter a valid media query name';
	}
}

// Headings
@mixin headings( $from: 1, $to: 6 ) {
    @for $i from $from through $to {
		h#{$i} {
			@content;
		}
    }
}


// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
	[data-whatinput='mouse'] & {
		outline: 0;
	}
}


// OVERLAYS
@mixin overlay-solid (
    $selector,
    $color,
    $z-index,
    $height,
    $transition
)
{
    &::#{$selector} {
        content: '';
    
        background-color: $color;
        display: block;
        position: absolute;
        z-index: $z-index;
        
        height: $height;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        transition: $transition;
    }
}


@mixin overlay-linear-gradient (
    $selector,
    $z-index,
    $height,
    $direction,
    $color-stops...    
) 

{
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    @if ($selector == before) {
        &::before{
        content: '';

        background: linear-gradient($direction, $color-stops);
        display: block;
        position: absolute;
        z-index: $z-index;
        
        height: $height;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        }
    }

    @if ($selector == after) {
        &::after{
        content: '';

        background: linear-gradient($direction, $color-stops);
        display: block;
        position: absolute;
        z-index: $z-index;
        
        height: $height;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        }
    }
}

@mixin overlay-radial-gradient (
    $selector,
    $z-index,
    $height,
    $width,
    $direction,
    $color-stops... 
)

{   
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: circle;
    }

    @if ($selector == before) {
        &::before{
        content: '';

        background: radial-gradient($direction, $color-stops);
        display: block;
        position: absolute;
        z-index: $z-index;
        
        height: $height;
        width: $width;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        }
    }

    @if ($selector == after) {
        &::after{
        content: '';

        background: radial-gradient($direction, $color-stops);
        display: block;
        position: absolute;
        z-index: $z-index;
        
        height: $height;
        width: $width;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        }
    }
}